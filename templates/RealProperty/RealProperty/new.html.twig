{% extends 'base.html.twig' %}

{% import _self as widget_prototype_macro %}

{% block body %}
  <div class="container">
    <h1 class="mx-auto"
        style="margin: 5px 0 20px 0; text-align: center;
        color: #ffffff; font-weight: 100;">
      Добавление объявления
    </h1>

    <p id="description" class="mx-auto;" style="text-align: center; color: #ffffff;">
      Разместите ваше объявление, и оно станет доступно всем пользователям SweetHome
    </p>

    <div class="card col-8 text-white bg-q mx-auto" style="margin-bottom: 20px;">
      {#<div class="card-header"></div>#}
      <div class="card-body">
        {{ form_start(form) }}
        <div class="form-group">
          {{ form_row(form.type) }}
        </div>
        <div class="form-group">
          {{ form_row(form.address) }}
          {#<input id="pac-input" class="controls" type="text"#}
                 {#placeholder="Enter a location">#}
          {#<div id="type-selector" class="controls">#}
            {#<input type="radio" name="type" id="changetype-all" checked="checked">#}
            {#<label for="changetype-all">All</label>#}

            {#<input type="radio" name="type" id="changetype-establishment">#}
            {#<label for="changetype-establishment">Establishments</label>#}

            {#<input type="radio" name="type" id="changetype-address">#}
            {#<label for="changetype-address">Addresses</label>#}

            {#<input type="radio" name="type" id="changetype-geocode">#}
            {#<label for="changetype-geocode">Geocodes</label>#}
          {#</div>#}
          <div id="map"></div>
        </div>
        <div class="form-group">
          {{ form_row(form.originalAdText) }}
        </div>
        <div class="form-group">
          {{ form_row(form.area) }}
        </div>
        <div class="form-group">
          {{ form_row(form.cost) }}
        </div>
        <div class="form-group">
          {{ form_row(form.purpose) }}
        </div>

        <h4>Добавьте изображения</h4>

        <div class="card-columns gallery"
             data-prototype="{{ widget_prototype_macro.widget_prototype(
             form.images.vars.prototype
             )|e }}">
          {#{% for image in form.images %}#}
            {#<td style="width: 30% !important;">{{ form_row(image.imageFile) }}</td>#}
          {#{% endfor %}#}
        </div>

        <br>
        <div class="form-group">
          {{ form_row(form.submit) }}
        </div>
        {{ form_end(form) }}
      </div>
    </div>
  </div>

  <!-- Modal -->
  <div class="modal fade" id="uploadingDisabledModal" tabindex="-1" role="dialog"
       aria-labelledby="uploadingDisabledModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="uploadingDisabledModalLongTitle">Действие невозможно</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <p>Некоторые из изображений не были добавлены. Попробуйте добавить их заново.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
        </div>
      </div>
    </div>
  </div>
{% endblock body %}

{% macro widget_prototype(widget) %}
  <div class="card text-white bg-dark text-right">
    <img class="card-img-top"
         src="{{ asset('images/cloud.png') }}" alt="" data-was-changed="false">
    <div class="card-body">
      {{ form_widget(widget.imageFile) }}
      {#<h5 class="card-title">Card title</h5>#}
      {#<p class="card-text">Hello!</p>#}
      {#<p class="card-text"><small class="text-muted">Last updated 3 mins ago</small></p>#}
      {#<a href="#" class="btn btn-secondary"><i class="fas fa-trash-alt fa-lg"></i></a>#}
    </div>
  </div>
{% endmacro %}

{% block stylesheets %}
  {{ parent() }}
  <style>
    /* Template styles */
    :root {
      --main-bg-color: #423443;
      --grape-color: #2A212B;
      --grape-color-transparent: rgba(42, 33, 43, 0.7);
      --light-color: #AA7E7B;
      --light-color-hover: #986f6d;
      --dark-color: #2A212B;
      --light-color-transparent: rgba(170, 126, 123, 0.95);
    }
    body {
      /*background-image: url("bundles/platformlanding/images/body_background.jpg");*/
      /*background-repeat: repeat;*/
      background-color: var(--main-bg-color);
    }

    .bg-q {
      background-color: var(--dark-color);
    }

    .for-adding {
      cursor: pointer;
    }
    .vich-image {
      /*display: none;*/
    }

    /* Content area styles */
    .bg-grape {
      background-color: var(--grape-color);
    }

    /* Navigation bar styles */
    .navbar {
      padding: .7rem 1rem;
      /*position: fixed;*/
      /*left: 0;*/
      /*right: 0;*/
    }
    .navbar-transparent {
      background: none;
    }

    body{
      display: flex;
      display: -webkit-flex;
      flex-direction: column;
      -webkit-flex-direction: column;
      height: 100%;
    }
  </style>
  <style>
    /* Always set the map height explicitly to define the size of the div
     * element that contains the map. */
    #map {
      height: 400px;
      border-radius: .25rem;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
    .controls {
      margin-top: 10px;
      border: 1px solid transparent;
      border-radius: 2px 0 0 2px;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
      height: 32px;
      outline: none;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
    }

    #real_property_real_property_address {
      background-color: #fff;
      font-family: Roboto;
      font-size: 15px;
      font-weight: 300;
      margin-left: 12px;
      padding: 0 11px 0 13px;
      text-overflow: ellipsis;
      border-radius: .25rem !important;
      width: 70%;
    }

    #pac-input {
      background-color: #fff;
      font-family: Roboto;
      font-size: 15px;
      font-weight: 300;
      margin-left: 12px;
      padding: 0 11px 0 13px;
      text-overflow: ellipsis;
      width: 300px;
    }

    #pac-input:focus {
      border-color: #4d90fe;
    }

    .pac-container {
      font-family: Roboto;
    }

    #type-selector {
      color: #fff;
      background-color: #4d90fe;
      padding: 5px 11px 0px 11px;
    }

    #type-selector label {
      font-family: Roboto;
      font-size: 13px;
      font-weight: 300;
    }
  </style>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.js"></script>
  <script>
    // This example requires the Places library. Include the libraries=places
    // parameter when you first load the API. For example:
    // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

    function initMap() {
      var map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: -33.8688, lng: 151.2195},
        zoom: 13
      });
      var input = /** @type {!HTMLInputElement} */(
        document.getElementById('real_property_real_property_address'));

      var types = document.getElementById('type-selector');
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

      var autocomplete = new google.maps.places.Autocomplete(input);
      autocomplete.bindTo('bounds', map);

      var infowindow = new google.maps.InfoWindow();
      var marker = new google.maps.Marker({
        map: map,
        anchorPoint: new google.maps.Point(0, -29)
      });

      autocomplete.addListener('place_changed', function() {
        infowindow.close();
        marker.setVisible(false);
        var place = autocomplete.getPlace();
        if (!place.geometry) {
          // User entered the name of a Place that was not suggested and
          // pressed the Enter key, or the Place Details request failed.
          window.alert("No details available for input: '" + place.name + "'");
          return;
        }

        // If the place has a geometry, then present it on a map.
        if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
        } else {
          map.setCenter(place.geometry.location);
          map.setZoom(17);  // Why 17? Because it looks good.
        }
        marker.setIcon(/** @type {google.maps.Icon} */({
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(35, 35)
        }));
        marker.setPosition(place.geometry.location);
        marker.setVisible(true);

        var address = '';
        if (place.address_components) {
          address = [
            (place.address_components[0] && place.address_components[0].short_name || ''),
            (place.address_components[1] && place.address_components[1].short_name || ''),
            (place.address_components[2] && place.address_components[2].short_name || '')
          ].join(' ');
        }

        infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
        infowindow.open(map, marker);
      });

      // Sets a listener on a radio button to change the filter type on Places
      // Autocomplete.
//      function setupClickListener(id, types) {
//        var radioButton = document.getElementById(id);
//        radioButton.addEventListener('click', function() {
//          autocomplete.setTypes(types);
//        });
//      }

//      setupClickListener('changetype-all', []);
//      setupClickListener('changetype-address', ['address']);
//      setupClickListener('changetype-establishment', ['establishment']);
//      setupClickListener('changetype-geocode', ['geocode']);
    }
  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyArObW_yEBXQ_KB5EVd5k00rXdfjNcP-EI&libraries=places&callback=initMap"
          async defer></script>

  <script>
    $("input[type='file']").each(function() {
      $(this).on('click', function() {
        console.log("clicked!");
        var reader = new FileReader();

        reader.onload = function(e) {
            console.log(e.target.result);
          input.parent().parent().parent().children('img').attr('src', e.target.result);
        };

        // read the image file as a data URL.
        reader.readAsDataURL(this.files[0]);
      });
    });
  </script>

  <script>
    var collectionHolder;

    var addImageButton = $('<p class="card-text">Добавить фото</p>');
    var addImageCardBody = $('<div class="card-body"></div>').append(addImageButton);
    var addImageCardImgTop = $('<img class="card-img-top" src="https://png.icons8.com/windows/540//add-camera.png" alt="">');
    var addImageCard = $('<div class="card text-white bg-dark text-right for-adding"></div>')
      .append(addImageCardImgTop)
      .append(addImageCardBody);

    jQuery(document).ready(function() {
      // Get the .card-columns container that holds the collection of cards
      collectionHolder = $('.gallery');

      // Add the "add a tag" anchor and li to the tags ul
      collectionHolder.append(addImageCard);

      // count the current form inputs we have (e.g. 2), use that as the new
      // index when inserting a new item (e.g. 2)
      collectionHolder.data('index', collectionHolder.find(':input').length);

      addImageCard.on('click', function(e) {
        // prevent the link from creating a "#" on the URL
        e.preventDefault();

        var allowedToAdd = true;
        $('.gallery > .card:not(.for-adding) > img').each(function () {
          console.log('data-was-changed = ' + $(this).data('was-changed'));
          if ($(this).data('was-changed') != 'true') {
            allowedToAdd = false;
          }
        });

        if (allowedToAdd) {
          // add a new tag form (see next code block)
          addCardToCollection(collectionHolder, addImageCard);
        }
        else {
          $('#uploadingDisabledModal').modal();
        }
      });

      // add a delete link to all of the existing tag form li elements
      collectionHolder.find('tr').each(function() {
        if (!$(this).hasClass('for-adding')) {
          addDeleteButtonToCard($(this));
        }
      });
    });

    function addCardToCollection(collectionHolder, addImageCard) {
      var deleteAfterPerforming = false;

      // Get the data-prototype explained earlier
      var prototype = collectionHolder.data('prototype');

      // get the new index
      var index = collectionHolder.data('index');

      // Replace 'name' in the prototype's HTML to
      // instead be a number based on how many items we have
      var newCard = $(prototype.replace(/name/g, index));

      // increase the index with one for the next item
      collectionHolder.data('index', index + 1);

      // Display the form in the page in an li, before the "Add a tag" link li
      addImageCard.before(newCard);

      newCard.find('input').change(function () {
        if (this.files && this.files[0]) {
          var reader = new FileReader();
          reader.onload = function (e) {
            newCard.find('img').attr('src', e.target.result);
            newCard.find('img').data('was-changed', 'true');
          };
          reader.readAsDataURL(this.files[0]);
        }
      });

      addUploadButtonToCard(newCard);

      // add a delete link to the new form
      addDeleteButtonToCard(newCard);

      newCard.find('input').click();
    }

    function addDeleteButtonToCard(card) {
      var deleteButton = $('<a href="" class="btn btn-secondary"><i class="fas fa-trash-alt fa-lg"></i></a>');
      var cardBody = $(card).find('div.card-body');

      cardBody.append(deleteButton);

      deleteButton.on('click', function(e) {
        // prevent the link from creating a "#" on the URL
        e.preventDefault();

        // remove the li for the tag form
        card.remove();
      });
    }

    function addUploadButtonToCard(card) {
        var uploadButton = $('<a href="" class="btn btn-secondary"><i class="fas fa-search fa-lg"></i></a>');
        var cardBody = $(card).find('div.card-body');

        cardBody.append(uploadButton);

        uploadButton.on('click', function(e) {
            // prevent the link from creating a "#" on the URL
            e.preventDefault();

            // remove the li for the tag form
            $(card).find('input').click();
        });
    }
  </script>
{% endblock %}
