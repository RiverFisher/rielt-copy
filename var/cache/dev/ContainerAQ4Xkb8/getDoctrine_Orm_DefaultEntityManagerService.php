<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.orm.default_entity_manager' shared service.

include_once $this->targetDirs[3].'/vendor/doctrine/cache/lib/Doctrine/Common/Cache/ArrayCache.php';
include_once $this->targetDirs[3].'/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/Driver/MappingDriver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/Driver/AnnotationDriver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/Driver/AnnotationDriver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/Driver/MappingDriverChain.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/NamingStrategy.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/UnderscoreNamingStrategy.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/QuoteStrategy.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/DefaultQuoteStrategy.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Mapping/EntityListenerResolver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Mapping/EntityListenerServiceResolver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Mapping/ContainerAwareEntityListenerResolver.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Repository/RepositoryFactory.php';
include_once $this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/Repository/ContainerRepositoryFactory.php';
include_once $this->targetDirs[3].'/vendor/doctrine/dbal/lib/Doctrine/DBAL/Configuration.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/Configuration.php';
include_once $this->targetDirs[3].'/vendor/doctrine/doctrine-bundle/ManagerConfigurator.php';
include_once $this->targetDirs[3].'/vendor/doctrine/common/lib/Doctrine/Common/Persistence/ObjectManager.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManagerInterface.php';
include_once $this->targetDirs[3].'/vendor/doctrine/orm/lib/Doctrine/ORM/EntityManager.php';

$a = ($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService());

$b = new \Doctrine\Common\Cache\ArrayCache();
$b->setNamespace('sf_orm_default_a9d93a0d1a58535da097f252fe04ed203636b30a48f04a20c096688dd5a6377a');

$c = new \Doctrine\Common\Cache\ArrayCache();
$c->setNamespace('sf_orm_default_a9d93a0d1a58535da097f252fe04ed203636b30a48f04a20c096688dd5a6377a');

$d = new \Doctrine\Common\Cache\ArrayCache();
$d->setNamespace('sf_orm_default_a9d93a0d1a58535da097f252fe04ed203636b30a48f04a20c096688dd5a6377a');

$e = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver($a, array(0 => ($this->targetDirs[3].'/src/Entity'), 1 => ($this->targetDirs[3].'/vendor/vich/uploader-bundle/Entity')));

$f = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
$f->addDriver($e, 'App\\Entity');
$f->addDriver($e, 'Vich\\UploaderBundle\\Entity');

$g = new \Doctrine\ORM\Configuration();
$g->setEntityNamespaces(array('App' => 'App\\Entity', 'VichUploaderBundle' => 'Vich\\UploaderBundle\\Entity'));
$g->setMetadataCacheImpl($b);
$g->setQueryCacheImpl($c);
$g->setResultCacheImpl($d);
$g->setMetadataDriverImpl($f);
$g->setProxyDir(($this->targetDirs[0].'/doctrine/orm/Proxies'));
$g->setProxyNamespace('Proxies');
$g->setAutoGenerateProxyClasses(true);
$g->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
$g->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
$g->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy());
$g->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
$g->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver($this));
$g->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\ServiceLocator(array('App\\Repository\\Platform\\ContainerImageRepository' => function () {
    return ($this->privates['App\Repository\Platform\ContainerImageRepository'] ?? $this->load(__DIR__.'/getContainerImageRepositoryService.php'));
}, 'App\\Repository\\Platform\\ContainerRepository' => function () {
    return ($this->privates['App\Repository\Platform\ContainerRepository'] ?? $this->load(__DIR__.'/getContainerRepositoryService.php'));
}, 'App\\Repository\\Platform\\ImageRepository' => function () {
    return ($this->privates['App\Repository\Platform\ImageRepository'] ?? $this->load(__DIR__.'/getImageRepositoryService.php'));
}, 'App\\Repository\\Platform\\UserRepository' => function () {
    return ($this->privates['App\Repository\Platform\UserRepository'] ?? $this->load(__DIR__.'/getUserRepositoryService.php'));
}, 'App\\Repository\\RealProperty\\RealPropertyImageRepository' => function () {
    return ($this->privates['App\Repository\RealProperty\RealPropertyImageRepository'] ?? $this->load(__DIR__.'/getRealPropertyImageRepositoryService.php'));
}, 'App\\Repository\\RealProperty\\RealPropertyRepository' => function () {
    return ($this->privates['App\Repository\RealProperty\RealPropertyRepository'] ?? $this->load(__DIR__.'/getRealPropertyRepositoryService.php'));
}, 'App\\Repository\\RealProperty\\RealPropertyTypeRepository' => function () {
    return ($this->privates['App\Repository\RealProperty\RealPropertyTypeRepository'] ?? $this->load(__DIR__.'/getRealPropertyTypeRepositoryService.php'));
}))));

$this->services['doctrine.orm.default_entity_manager'] = $instance = \Doctrine\ORM\EntityManager::create(($this->services['doctrine.dbal.default_connection'] ?? $this->load(__DIR__.'/getDoctrine_Dbal_DefaultConnectionService.php')), $g);

(new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array()))->configure($instance);

return $instance;
